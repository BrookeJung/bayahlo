{"version":3,"sources":["components/Header.jsx","components/PageWrapper.jsx","components/Main.jsx","App.js","serviceWorker.js","index.js","style/logo/bayalogo.png"],"names":["Wrapper","styled","div","MenuLink","Item","Link","MenuWrapper","Header","to","style","width","src","logo","alt","type","PageWrapper","MainWrapper","Main","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"0mCAMA,IAAMA,EAAUC,IAAOC,IAAV,KAmBPC,GALWF,YAAO,IAAKG,KAAZH,CAAH,KAKGA,YAAOI,IAAPJ,CAAH,MAcRK,EAAcL,IAAOC,IAAV,KAmCFK,EA5BA,WACb,OACE,kBAACP,EAAD,KACE,kBAAC,IAAD,CAAMQ,GAAG,KACP,yBAAKC,MAAO,CAAEC,MAAO,KAAOC,IAAKC,IAAMC,IAAK,kBAE9C,kBAACP,EAAD,KACE,kBAACH,EAAD,CAAUK,GAAG,KACX,uBAAMM,KAAK,UADb,0BAIA,kBAACX,EAAD,CAAUK,GAAG,KACX,uBAAMM,KAAK,SADb,0BAIA,kBAACX,EAAD,CAAUK,GAAG,KACX,uBAAMM,KAAK,SADb,sCAIA,kBAACX,EAAD,CAAUK,GAAG,KACX,uBAAMM,KAAK,oBADb,gB,gHC/DR,IAIeC,EAJKd,IAAOC,IAAV,K,qGCGjB,IAAMc,EAAcf,IAAOC,IAAV,KAcFe,EAXF,WACX,OACE,kBAAC,EAAD,KACE,kBAACD,EAAD,KACE,2CACA,uBAAQF,KAAK,SAAb,c,QCMOI,MAbf,WACE,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWH,QCAjBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBErInBC,EAAOC,QAAU,IAA0B,uC","file":"static/js/main.09b82072.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport logo from '../style/logo/bayalogo.png'\r\nimport { Dropdown, Button, Icon, Menu } from 'antd'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: nowrap;\r\n  justify-content: flex-start;\r\n  align-content: stretch;\r\n  padding: 18px;\r\n  width: 100%;\r\n  z-index: 10;\r\n  position: fixed;\r\n  background-color: white;\r\n  height: 84;\r\n`\r\n\r\nconst MenuItem = styled(Menu.Item)`\r\n  & > * {\r\n    padding-right: 5px;\r\n  }\r\n`\r\nconst MenuLink = styled(Link)`\r\n  font-weight: 450;\r\n  font-size: 1.05rem;\r\n  text-decoration: none;\r\n  color: #d8b63f;\r\n  &:hover {\r\n    color: #727272;\r\n  }\r\n  margin-right: 20px;\r\n  &:nth-child(1) {\r\n    margin-left: 10px;\r\n  }\r\n`\r\n\r\nconst MenuWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  & > * {\r\n    padding-right: 10px;\r\n  }\r\n`\r\nconst Header = () => {\r\n  return (\r\n    <Wrapper>\r\n      <Link to=\"/\">\r\n        <img style={{ width: 150 }} src={logo} alt={'로고'} />\r\n      </Link>\r\n      <MenuWrapper>\r\n        <MenuLink to=\"/\">\r\n          <Icon type=\"crown\" />\r\n          &nbsp;청첩장\r\n        </MenuLink>\r\n        <MenuLink to=\"/\">\r\n          <Icon type=\"gift\" />\r\n          &nbsp;감사장\r\n        </MenuLink>\r\n        <MenuLink to=\"/\">\r\n          <Icon type=\"edit\" />\r\n          &nbsp;커스텀제작\r\n        </MenuLink>\r\n        <MenuLink to=\"/\">\r\n          <Icon type=\"question-circle\" />\r\n          &nbsp;Q &amp; A\r\n        </MenuLink>\r\n      </MenuWrapper>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import styled from 'styled-components'\r\n\r\nconst PageWrapper = styled.div`\r\n  padding-top: 100px;\r\n`\r\n\r\nexport default PageWrapper\r\n","import React from 'react'\r\nimport { Button } from 'antd'\r\nimport PageWrapper from './PageWrapper'\r\nimport styled from 'styled-components'\r\n\r\nconst MainWrapper = styled.div`\r\n  background-color: #fffcf0;\r\n`\r\nconst Main = () => {\r\n  return (\r\n    <PageWrapper>\r\n      <MainWrapper>\r\n        <h1> Main page </h1>\r\n        <Button type=\"ghost\">Sign Up</Button>\r\n      </MainWrapper>\r\n    </PageWrapper>\r\n  )\r\n}\r\n\r\nexport default Main\r\n","import React from 'react'\nimport './App.css'\nimport Header from './components/Header.jsx'\nimport Main from './components/Main.jsx'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\nfunction App() {\n  return (\n    <div>\n      <Router>\n        <Header />\n        <Switch>\n          <Route path=\"/\" component={Main}></Route>\n        </Switch>\n      </Router>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bayalogo.d7e0df12.png\";"],"sourceRoot":""}